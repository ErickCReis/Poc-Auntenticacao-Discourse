import axios from 'axios';
import FormData from 'form-data';
import { decode, encode } from './crypt.js';
import { addLogInterceptor } from './utils.js';

const adminClient = axios.create({
  baseURL: process.env.DISCOURSE_API_URL,
  headers: {
    'Api-Key': process.env.ADMIN_API_KEY,
    'Api-Username': process.env.ADMIN_API_USERNAME,
  },
});

addLogInterceptor(adminClient, '[Discourse API]');

function userClient(apiKey, apiUsername) {
  const client = axios.create({
    baseURL: process.env.DISCOURSE_API_URL,
    headers: {
      'Api-Key': apiKey,
      'Api-Username': apiUsername,
    },
  });

  addLogInterceptor(client, '[Discourse API Client]');

  return client;
}

export function sso_login({ sso, sig, user }) {
  const { data } = decode({ sso, sig });

  const params = {
    nonce: data.nonce,
    external_id: user.id,
    email: user.email,
    name: user.nome + ' ' + user.sobrenome,
    avatar_url: user.picture,
  };

  const { query } = encode(params);

  // const result =  `${data.return_sso_url}/session/sso_login?${responseQuery}`
  const result = `${process.env.DISCOURSE_URL}/session/sso_login?${query}`;

  return result;
}

/*
export function checkUser(username) {
  return adminClient.get(`/u/check_username.json?username=${username}`).then((response) => {
    return !response.data.available;
  });
}

export function createUser(username) {
  const form = new FormData();
  form.append('name', username);
  form.append('email', `${username}@example.com`);
  form.append('password', 'gran12345678');
  form.append('username', username);
  form.append('active', 'true');
  form.append('approved', 'true');
  form.append('user_fields[1]', 'custom_field_1');

  return adminClient({
    method: 'POST',
    url: '/users.json',
    data: form,
    headers: {
      'Content-Type': 'multipart/form-data',
    },
  })
    .then((response) => {
      return response.data.user_id;
    })
    .catch((error) => {
      console.log(error);
      return null;
    });
}
*/

export function getUser(userId) {
  return adminClient
    .get(`/u/by-external/${userId}.json`)
    .then((response) => {
      return response.data.user;
    })
    .catch(() => null);
}

export function sso_sync({ id, username, email }) {
  const { data } = encode({
    external_id: id,
    email,
    username,
    require_activation: false,
  });

  return adminClient.post(`/admin/users/sync_sso.json`, data).then((res) => res.data);
}

export function generateToken(username) {
  return adminClient
    .post(`/admin/api/keys.json`, {
      key: {
        username,
        description: 'generated by server.js',
        scopes: [{ scope_id: 'topics:write' }],
      },
    })
    .then((response) => {
      return response.data.key.key;
    });
}

export function postTopic({ token, username, topic }) {
  const client = userClient(token, username);
  return client
    .post(`/posts.json`, {
      ...topic,
      title: `[${username}] - ${topic.title} - ${new Date().toLocaleString()}`,
    })
    .then((response) => response.data);
}
